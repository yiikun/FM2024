invariant "test_reachable_state_1"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_2"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_3"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Tip )
endforall;

invariant "test_reachable_state_4"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_5"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_6"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Tip & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_7"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_8"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_9"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_10"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_11"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Tip & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_12"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_13"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_14"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_15"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_16"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_17"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_18"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_19"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_20"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Tip & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_21"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_22"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_23"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_24"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_25"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_26"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_27"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_28"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_29"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_30"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_31"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_32"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_33"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_34"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_35"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_36"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_37"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Trunk & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Tip )
endforall;

invariant "test_reachable_state_38"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Trunk & Tree[6].cache[1].state = Tip & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_39"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_40"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_41"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_42"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_43"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_44"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_45"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_46"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_47"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_48"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_49"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_50"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_51"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_52"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_53"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_54"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_55"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_56"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_57"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_58"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_59"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_60"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_61"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_62"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_63"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_64"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_65"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_66"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_67"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_68"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_69"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_70"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_71"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_72"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_73"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_74"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_75"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Trunk & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Tip & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_76"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Trunk & Tree[4].cache[1].state = Tip & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_77"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_78"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_79"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_80"
forall a:addrType do
!( Tree[1].cache[1].state = None & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_81"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_82"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_83"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_84"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_85"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_86"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_87"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_88"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_89"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_90"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_91"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_92"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_93"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_94"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_95"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_96"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_97"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_98"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_99"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_100"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_101"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_102"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_103"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_104"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_105"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_106"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_107"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_108"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_109"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_110"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_111"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_112"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_113"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_114"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_115"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_116"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_117"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_118"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_119"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_120"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_121"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_122"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_123"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_124"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_125"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_126"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_127"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_128"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_129"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_130"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_131"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_132"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_133"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_134"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_135"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_136"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_137"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_138"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_139"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_140"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_141"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_142"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_143"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_144"
forall a:addrType do
!( Tree[1].cache[1].state = Branch & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_145"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Tip )
endforall;

invariant "test_reachable_state_146"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Tip & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_147"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Tip & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_148"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Tip & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_149"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Trunk & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Tip )
endforall;

invariant "test_reachable_state_150"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Trunk & Tree[6].cache[1].state = Tip & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_151"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_152"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_153"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_154"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Tip & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_155"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = Trunk & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Tip & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_156"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = Trunk & Tree[4].cache[1].state = Tip & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_157"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_158"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_159"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_160"
forall a:addrType do
!( Tree[1].cache[1].state = Trunk & Tree[2].cache[1].state = Tip & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_161"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_162"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_163"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_164"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_165"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_166"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_167"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_168"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_169"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_170"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_171"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_172"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_173"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_174"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_175"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_176"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_177"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_178"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_179"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_180"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_181"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_182"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_183"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_184"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_185"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_186"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_187"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_188"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_189"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_190"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_191"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_192"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = None & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_193"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_194"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_195"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_196"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_197"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_198"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_199"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_200"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_201"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_202"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_203"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_204"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_205"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_206"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_207"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_208"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = None & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_209"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_210"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_211"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_212"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_213"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_214"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_215"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_216"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = None & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_217"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_218"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_219"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_220"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = None & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_221"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_222"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = None & Tree[7].cache[1].state = Branch )
endforall;

invariant "test_reachable_state_223"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = None )
endforall;

invariant "test_reachable_state_224"
forall a:addrType do
!( Tree[1].cache[1].state = Tip & Tree[2].cache[1].state = Branch & Tree[4].cache[1].state = Branch & Tree[5].cache[1].state = Branch & Tree[3].cache[1].state = Branch & Tree[6].cache[1].state = Branch & Tree[7].cache[1].state = Branch )
endforall;